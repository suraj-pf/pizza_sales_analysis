-- create database pizzahut;

 use  pizzahut;

-- create table orders(
-- order_id int not null,
-- order_date date not null,
-- order_time time not null,
-- primary key(order_id)
-- );
--   

-- create table order_details(
-- order_details_id int not null,
-- order_id int not null,
-- pizza_id text not null,
-- quantity int not null,
-- primary key(order_details_id)
-- );order_details

-- Basic:

-- Retrieve the total number of orders placed.
select count(order_id) as total_orders from orders;

-- Calculate the total revenue generated from pizza sales.
SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS revenue
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id ;

-- Identify the highest-priced pizza.
SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- Identify the most common pizza size ordered.
select quantity ,count(order_details_id)
from order_details group by quantity ;

-- List the top 5 most ordered pizza types along with their quantities.
SELECT 
    pizzas.size,
    COUNT(order_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC;



-- Intermediate:
-- Join the necessary tables to find the total quantity of each pizza category ordered.

use pizzahut;

SELECT 
    pizza_types.category AS category,
    SUM(order_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY category
order by quantity;

-- Determine the distribution of orders by hour of the day.


select 	hour(order_time), count(order_id) from  orders
group by hour(order_time);



-- Join relevant tables to find the category-wise distribution of pizzas.


-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    ROUND(AVG(quantity), 0)
FROM
    (SELECT 
        DATE(orders.order_date),
            SUM(order_details.quantity) AS quantity
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY orders.order_date) AS order_quantity;


-- Determine the top 3 most ordered pizza types based on revenue.
SELECT 
    pizza_types.name,
    SUM(order_details.quantity * pizzas.price) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;


-- Advanced:


-- Calculate the percentage contribution of each pizza type to total revenue.


-- Analyze the cumulative revenue generated over time.
select order_date,sum(rev) over (order by order_date) as cm_rev
from
(SELECT 
    orders.order_date,
    SUM(order_details.quantity * pizzas.price) AS rev
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id
        JOIN
    orders ON orders.order_id = order_details.order_id
GROUP BY orders.order_date) as sales ;



-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select name,rev from 
(select category,name,rev, rank() over(partition by category  order by rev desc) as rn
from (select 
    pizza_types.category,
    pizza_types.name,
    SUM(order_details.quantity * pizzas.price) AS rev
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizza_types.category , pizza_types.name
) as a) as b
where rn <= 3;


